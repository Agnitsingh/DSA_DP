class Solution {
public:

    bool static comp(string &s1, string &s2)
    {
        return s1.length() < s2.length();
    }

    bool check(string &s1, string &s2)
    {
        if(s1.length() != 1 + s2.length()) return false;

        int i = 0;
        int j = 0;

        while(i<s1.length())
        {
            if(j<s2.length() && s1[i] == s2[j])
            {
                i++;
                j++;
            }
            else
            {
                i++;
            }
        }

        if(i == s1.length() && j == s2.length()) return true;
        return false;
    }

    int longestStrChain(vector<string>& words) {
        sort(words.begin(), words.end(), comp);

        int n = words.size();
        vector<int> dp(n, 1);

        for(int index=0; index<n; index++)
        {
            for(int prev=0; prev<index; prev++)
            {
                if(check(words[index], words[prev]) && 1 + dp[prev] > dp[index])
                {
                    dp[index] = 1 + dp[prev];
                }
            }
        }

        int maxi = 1;
        for(int i=1; i<n; i++)
        {
            if(dp[i]>maxi)
            {
                maxi = dp[i];
            }
        }

        return maxi;
    }
};
