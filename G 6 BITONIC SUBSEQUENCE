class Solution {
  public:
    
    vector<int> lis(vector<int> &temp)
    {
        int n = temp.size();
        vector<int>dp(n,1);
        
        for(int index = 0; index<n; index++)
        {
            for(int prev = 0; prev<index; prev++)
            {
                if(temp[prev]<temp[index] && dp[index]<1+dp[prev])
                {
                    dp[index] = 1 + dp[prev];
                }
            }
        }
        
        return dp;
    }
  
  
    int LongestBitonicSequence(int n, vector<int> &nums) {
        
        // ASCENDING & DESCENDING
        bool ascending = 1;
        bool descending = 1;
        for(int i=0; i<nums.size()-1; i++)
        {
            if(nums[i]>nums[i+1])
            {
                ascending = 0;
            }
            
            if(nums[i]<nums[i+1])
            {
                descending = 0;
            }
        }
        
        
        if(ascending || descending) return 0;
        
        vector<int> arr;
        for(int i=nums.size()-1; i>=0; i--)
        {
            arr.push_back(nums[i]);
        }
        
        vector<int> dp1 = lis(nums);
        vector<int> dp2 = lis(arr);
        
        
        
        reverse(dp2.begin(), dp2.end());
        
        
        
        vector<int> bitonic(nums.size(), 0);
        
        for(int i=0; i<nums.size(); i++)
        {
            bitonic[i] = (dp1[i]+dp2[i] -1);
        }
        
        int maxi = 0;
        for(int i=0; i<bitonic.size(); i++)
        {
            if(dp1[i]!=1 && dp2[i]!=1)
            {
                maxi = max(maxi, bitonic[i]);
            }
            
        }
        
        return maxi;
    }
};
