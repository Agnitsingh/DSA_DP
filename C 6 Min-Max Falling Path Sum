// RECURSION

class Solution {
public:

    int fall(int row, int col, vector<vector<int>> &matrix)
    {
        if(col<0 || col>=matrix[0].size()) return 1e9;
        if(row == 0) return matrix[0][col];

        int up = matrix[row][col] + fall(row-1, col, matrix);
        int ld = matrix[row][col] + fall(row-1, col-1, matrix);
        int rd = matrix[row][col] + fall(row-1, col+1, matrix);

        return min(up, min(ld,rd));
    }

    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n = matrix.size();
        int m = matrix[0].size();

        int mini = fall(n-1,0,matrix);
        for(int i=1; i<m; i++)
        {
            int ans = fall(n-1, i, matrix);
            mini = min(mini, ans);
        }

        return mini;
    }
};

// MEMOIZATION

class Solution {
public:

    int fall(int row, int col, vector<vector<int>> &matrix, vector<vector<int>> &dp)
    {
        if(col<0 || col>=matrix[0].size()) return 1e9;
        if(row == 0) return matrix[0][col];

        if(dp[row][col] != -1) return dp[row][col];

        int up = matrix[row][col] + fall(row-1, col, matrix, dp);
        int ld = matrix[row][col] + fall(row-1, col-1, matrix, dp);
        int rd = matrix[row][col] + fall(row-1, col+1, matrix, dp);

        return dp[row][col] = min(up, min(ld,rd));
    }

    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n = matrix.size();
        int m = matrix[0].size();
        vector<vector<int>> dp(n, vector<int>(m,-1));

        int mini = fall(n-1,0,matrix, dp);

        for(int i=1; i<m; i++)
        {
            int ans = fall(n-1, i, matrix, dp);
            mini = min(mini, ans);
        }

        return mini;
    }
};

// TABULATION...

    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n = matrix.size();
        int m = matrix[0].size();
        vector<vector<int>> dp(n, vector<int>(m,0));

        for(int col = 0; col<m; col++) dp[0][col] = matrix[0][col];

        for(int row = 1; row<n; row++)
        {
            for(int col = 0; col<m; col++)
            {
                int up = matrix[row][col] + dp[row-1][col];
                int ld = matrix[row][col];
                if(col>0){
                    ld = ld + dp[row-1][col-1];
                } else{
                    ld = 1e9;
                }
                int rd = matrix[row][col]; 
                if(col<m-1)
                {
                    rd = rd + dp[row-1][col+1];
                }
                else
                {
                    rd = 1e9;
                }

                dp[row][col] = min(up, min(ld,rd));
            }
        }
        int mini = 1e9;
        for(int col=0; col<m; col++)
        {
            mini = min(mini, dp[n-1][col]);
        }

        return mini;
    }
