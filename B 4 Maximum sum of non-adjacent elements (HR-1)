class Solution {
public:
    int rob(vector<int>& nums) {
        int n = nums.size();
        vector<int> dp(n, 0);
        dp[0] = nums[0];

        for(int i=1; i<n; i++)
        {
            int take = nums[i];
            if(i>1)
            {
                take = take + dp[i-2];
            }

            int notTake = 0 + dp[i-1];

            dp[i] = max(take, notTake);
        }

        return dp[n-1];
        
    }
};

// SPACE OPTIMISED

class Solution {
public:
    int rob(vector<int>& nums) {
        int n = nums.size();
        // vector<int> dp(n, 0);
        int prev1 = nums[0];
        int prev2 = 0;

        for(int i=1; i<n; i++)
        {
            int take = nums[i];
            if(i>1)
            {
                take = take + prev2;
            }

            int notTake = 0 + prev1;

            int curr = max(take, notTake);
            prev2 = prev1;
            prev1 = curr;
        }

        return prev1;
        
    }
};
