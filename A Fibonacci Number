// RECURSIVE

class Solution {
public:
    int fib(int n) {
        if(n<=1) return n;

        return fib(n-1) + fib(n-2);

    }
};

// MEMOIZATION

class Solution {
public:

    int fibonacci(int n, vector<int> &dp)
    {
        if(n==0 || n==1) return n;
        if(dp[n]!=-1) return dp[n];
        dp[n] = fibonacci(n-1, dp) + fibonacci(n-2, dp);
        return dp[n];
    }

    int fib(int n) {
        vector<int> dp(n+1, -1);
        return fibonacci(n,dp);
    }
};

// TABULATION

class Solution {
public:
    int fib(int n) {
        vector<int> dp(n+1, 0);

        dp[0] = 0;
        if(n>0) dp[1] = 1;

        for(int i=2; i<=n; i++)
        {
            dp[i] = dp[i-1] + dp[i-2];
        }

        return dp[n];
    }
};

// SPACE OPTIMISED

class Solution {
public:
    int fib(int n) {
        // vector<int> dp(n+1, 0);

        if(n<=1) return n;

        int prev2 = 0;
        int prev1 = 1;

        for(int i=2; i<=n; i++)
        {
            int curr = prev1 + prev2;
            prev2 = prev1;
            prev1 = curr;
        }

        return prev1;
    }
};
