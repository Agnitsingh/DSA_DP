// RECURSION

class Solution {
public:

    int fun(int index1, int index2, string s, string t)
    {
        if(index2 < 0) return 1;
        if(index1 < 0) return 0;
        
        if(s[index1] == t[index2])
        {
            return fun(index1-1, index2-1, s,t) + fun(index1-1, index2, s, t);
        }

        else return fun(index1-1, index2, s, t);
        
    }


    int numDistinct(string s, string t) {
        int n = s.length();
        int m = t.length();
        return fun(n-1, m-1, s, t);

    }
};

// MEMOIZATION...

class Solution {
public:

    int fun(int index1, int index2, string s, string t, vector<vector<int>> &dp)
    {
        if(index2 < 0) return 1;
        if(index1 < 0) return 0;

        if(dp[index1][index2]!=-1) return dp[index1][index2];
        
        if(s[index1] == t[index2])
        {
            return dp[index1][index2] = fun(index1-1, index2-1, s,t, dp) + fun(index1-1, index2, s, t, dp);
        }

        else return dp[index1][index2] = fun(index1-1, index2, s, t, dp);
        
    }


    int numDistinct(string s, string t) {
        int n = s.length();
        int m = t.length();
        vector<vector<int>> dp(n, vector<int>(m, -1));
        return fun(n-1, m-1, s, t, dp);

    }
};

// INDEXING..

class Solution {
public:

    int fun(int index1, int index2, string s, string t, vector<vector<int>> &dp)
    {
        if(index2 == 0) return 1;
        if(index1 == 0) return 0;

        if(dp[index1][index2]!=-1) return dp[index1][index2];
        
        if(s[index1-1] == t[index2-1])
        {
            return dp[index1][index2] = fun(index1-1, index2-1, s,t, dp) + fun(index1-1, index2, s, t, dp);
        }

        else return dp[index1][index2] = fun(index1-1, index2, s, t, dp);
        
    }


    int numDistinct(string s, string t) {
        int n = s.length();
        int m = t.length();
        vector<vector<int>> dp(n+1, vector<int>(m+1, -1));
        return fun(n, m, s, t, dp);

    }
};

// TABULATION...

class Solution {
public:

    int numDistinct(string s, string t) {
        int n = s.length();
        int m = t.length();
        vector<vector<double>> dp(n+1, vector<double>(m+1, 0));
        
        // BASE CASE..
        for(int i=0; i<=n; i++) dp[i][0] = 1;
        for(int j=1; j<=m; j++) dp[0][j] = 0;

        for(int index1 = 1; index1<=n; index1++)
        {
            for(int index2=1; index2<=m; index2++)
            {
                if(s[index1-1] == t[index2-1])
                {
                    dp[index1][index2] = dp[index1-1][index2-1] + dp[index1-1][index2];
                }

                else dp[index1][index2] = dp[index1-1][index2];
            }
        }
        return (int) dp[n][m];
    }
};
