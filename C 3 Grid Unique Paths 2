// RECURSION

class Solution {
public:

    int unq(int index1, int index2, vector<vector<int>>& obstacleGrid)
    {
        if(index1 == 0 && index2 == 0) return 1;
        if(index1>=0 && index2>=0 && obstacleGrid[index1][index2]==1) return 0;
        if(index1<0 || index2<0) return 0;

        int up = unq(index1-1, index2, obstacleGrid);
        int left = unq(index1, index2-1, obstacleGrid);

        return up+left;
    }

    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int n = obstacleGrid.size();
        int m = obstacleGrid[0].size();
        if(obstacleGrid[0][0] == 1) return 0;
        return unq(n-1, m-1, obstacleGrid);
    }
};

// MEMOIZATION

class Solution {
public:

    int unq(int index1, int index2, vector<vector<int>>& obstacleGrid, vector<vector<int>> &dp)
    {
        if(index1 == 0 && index2 == 0) return 1;
        if(index1>=0 && index2>=0 && obstacleGrid[index1][index2]==1) return 0;
        if(index1<0 || index2<0) return 0;

        if(dp[index1][index2] != -1) return dp[index1][index2];

        int up = unq(index1-1, index2, obstacleGrid, dp);
        int left = unq(index1, index2-1, obstacleGrid, dp);

        return dp[index1][index2] = up+left;
    }

    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int n = obstacleGrid.size();
        int m = obstacleGrid[0].size();
        if(obstacleGrid[0][0] == 1) return 0;
        vector<vector<int>> dp(n, vector<int>(m, -1));
        return unq(n-1, m-1, obstacleGrid, dp);
    }
};
