// MEMOIZATION...

bool fun(int i, int j, string s, string p, vector<vector<int>> &dp)
    {
        // Base Cases
        if(i<0 && j<0) return true;
        if(i<0 && j>=0) return false;
        if(j<0 && i>=0)
        {
            for(int cnt = 0; cnt<=i; cnt++)
            {
                if(s[cnt] != '*') return false;
            }
            return true;
        }

        if(dp[i][j] != -1) return dp[i][j];

        if(s[i] == p[j] || s[i] == '?')
        {
            return dp[i][j] = fun(i-1, j-1, s, p, dp);
        }

        else if(s[i] == '*')
        {
            return dp[i][j] = fun(i-1,j,s,p,dp) || fun(i, j-1, s, p, dp);
        }

        else return dp[i][j] = false;
    }

// TABULATION...

class Solution {
public:

    bool isMatch(string s, string p) {
        int n = p.length();
        int m = s.length();
        vector<vector<bool>> dp(n+1, vector<bool>(m+1, 0));
        
        // Base Case..
        dp[0][0] = true;
        for(int j=1; j<=m; j++) dp[0][j] = false;

        // for(int i=1; i<=n; i++)
        // {
        //     int flag = true;
        //     for(int cnt = 1; cnt<=i; cnt++)
        //     {   
        //         if(p[cnt-1]!='*'){
        //             flag = false;
        //             break;
        //         }
        //     }
        //     dp[i][0] = flag;
        // }

        if(p[0] == '*')
        {
            int i=1;
            while(p[i-1] == '*')
            {
                dp[i][0] = 1;
                i = i+1;
            }
        }

        for(int i=1; i<=n; i++)
        {
            for(int j=1; j<=m; j++)
            {
                if(p[i-1] == s[j-1] || p[i-1] == '?')
                {
                    dp[i][j] = dp[i-1][j-1];
                }

                else if(p[i-1] == '*')
                {
                    dp[i][j] = dp[i-1][j] || dp[i][j-1];
                }

                else dp[i][j] = false;
            }
        }
        return dp[n][m];
    }
};
