// RECURSION

class Solution {
public:

    int fun(int index1, int index2, string text1, string text2)
    {
        if(index1<0 || index2<0) return 0;

        if(text1[index1] == text2[index2]) return 1 + fun(index1-1, index2-1, text1, text2);

        return 0 + max(fun(index1-1, index2, text1, text2), fun(index1, index2-1, text1, text2));
    }

    int longestCommonSubsequence(string text1, string text2) {
        int n = text1.length();
        int m = text2.length();

        return fun(n-1,m-1,text1,text2);
    }
};

// MEMOIZATION

class Solution {
public:

    int fun(int index1, int index2, string text1, string text2, vector<vector<int>> &dp)
    {
        if(index1<0 || index2<0) return 0;

        if(dp[index1][index2]!=-1) return dp[index1][index2];

        if(text1[index1] == text2[index2]) return 1 + fun(index1-1, index2-1, text1, text2,dp);

        return dp[index1][index2] = 0 + max(fun(index1-1, index2, text1, text2, dp), fun(index1, index2-1, text1, text2, dp));
    }

    int longestCommonSubsequence(string text1, string text2) {
        int n = text1.length();
        int m = text2.length();
        vector<vector<int>> dp(n, vector<int>(m,-1));
        return fun(n-1,m-1,text1,text2, dp);
    }
};

// SHIFTING OF INDEX...

class Solution {
public:

    int fun(int index1, int index2, string text1, string text2, vector<vector<int>> &dp)
    {
        if(index1==0 || index2==0) return 0;

        if(dp[index1][index2]!=-1) return dp[index1][index2];

        if(text1[index1-1] == text2[index2-1]) return 1 + fun(index1-1, index2-1, text1, text2,dp);

        return dp[index1][index2] = 0 + max(fun(index1-1, index2, text1, text2, dp), fun(index1, index2-1, text1, text2, dp));
    }

    int longestCommonSubsequence(string text1, string text2) {
        int n = text1.length();
        int m = text2.length();
        vector<vector<int>> dp(n+1, vector<int>(m+1,-1));
        return fun(n,m,text1,text2, dp);
    }
};

// TABULATION

class Solution {
public:

    int longestCommonSubsequence(string text1, string text2) {
        int n = text1.length();
        int m = text2.length();
        vector<vector<int>> dp(n+1, vector<int>(m+1,0));
        
        // Handling BASE CASE...
        for(int j=0; j<=m; j++) dp[0][j] = 0;
        for(int i=0; i<=n; i++) dp[i][0] = 0;

        for(int index1=1; index1<=n; index1++)
        {
            for(int index2=1; index2<=m; index2++)
            {
                if(text1[index1-1] == text2[index2-1]) dp[index1][index2] = 1 + dp[index1-1][index2-1];
                else dp[index1][index2] = 0 + max(dp[index1-1][index2], dp[index1][index2-1]);
            }
        }

        return dp[n][m];
    }
};
