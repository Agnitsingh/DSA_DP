// RECURSION

class Solution {
  public:
    
    int minCost(vector<int> &height, int index, int k)
    {
        if(index == 0) return 0;
        
        int minEnergy = INT_MAX;
        
        for(int i=1; i<=k; i++)
        {
            if(index-i>=0)
            {
                int stepEnergy = minCost(height, index-i, k) + abs(height[index]-height[index-i]);
                minEnergy = min(minEnergy, stepEnergy);
            }
        }
        
        return minEnergy;
    }
  
    int minimizeCost(vector<int>& height, int n, int k) {
        minCost(height, n-1, k);
    }
};

// MEMOIZATION

class Solution {
  public:
    
    int minCost(vector<int> &height, int index, int k, vector<int> &dp)
    {
        if(index == 0) return 0;
        
        int minEnergy = INT_MAX;
        if(dp[index] != -1) return dp[index];
        
        for(int i=1; i<=k; i++)
        {
            if(index-i>=0)
            {
                int stepEnergy = minCost(height, index-i, k, dp) + abs(height[index]-height[index-i]);
                minEnergy = min(minEnergy, stepEnergy);
            }
        }
        
        dp[index] = minEnergy;
        return dp[index];
    }
  
    int minimizeCost(vector<int>& height, int n, int k) {
        vector<int> dp(n, -1);
        return minCost(height, n-1, k, dp);
    }
};
